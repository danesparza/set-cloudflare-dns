name: Build and release

on: [push]

env:
  APP_NAME: set-cloudflare-dns
  APP_VERSION: 1.0.${{github.run_number}}
  CONTAINER_IMAGE_NAME: set-cloudflare-dns:1.0.${{github.run_number}}
  PACKAGE_PATH: github.com/danesparza/set-cloudflare-dns
  GO_VERSION: 1.24.0

jobs:
  vulnerabilitycheck:
    name: Vulnerabilities scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{env.GO_VERSION}}
          check-latest: true

      - name: Get scanner tool
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Scan for vulnerabilities
        run: govulncheck '${{env.PACKAGE_PATH}}'

  test:
    name: Tests
    runs-on: ubuntu-latest
    container: golang:latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Get dependencies
        run: go mod download

      - name: Test
        run: go test -v ./...

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Get compiler tool
        run: go install github.com/mitchellh/gox@latest

      - name: Get dependencies
        run: go mod download

      - name: Build
        run: mkdir -p /tmp/binaries; gox -osarch="linux/amd64 darwin/amd64" -ldflags "-X ${PACKAGE_PATH}/version.BuildNumber=${GITHUB_RUN_NUMBER} -X ${PACKAGE_PATH}/version.CommitID=${GITHUB_SHA} -X '${PACKAGE_PATH}/version.Prerelease=-'" -output "/tmp/binaries/${APP_NAME}_{{.OS}}_{{.Arch}}" ${PACKAGE_PATH}/...

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Release binaries
          path: /tmp/binaries

  dockerize:
    name: Docker image
    needs:
      - test
      - build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU (for multi-arch support)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            danesparza/${{ env.CONTAINER_IMAGE_NAME }}
            danesparza/${{ env.APP_NAME }}:latest
          build-args: |
            buildNum=${{ github.run_number }}
            circleSha=${{ github.sha }}
            packagePath=${{ env.PACKAGE_PATH }}