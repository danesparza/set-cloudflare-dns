// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudflare "github.com/cloudflare/cloudflare-go"

	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// CreateDNSRecord provides a mock function with given fields: ctx, rc, params
func (_m *API) CreateDNSRecord(ctx context.Context, rc *cloudflare.ResourceContainer, params cloudflare.CreateDNSRecordParams) (cloudflare.DNSRecord, error) {
	ret := _m.Called(ctx, rc, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateDNSRecord")
	}

	var r0 cloudflare.DNSRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.CreateDNSRecordParams) (cloudflare.DNSRecord, error)); ok {
		return rf(ctx, rc, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.CreateDNSRecordParams) cloudflare.DNSRecord); ok {
		r0 = rf(ctx, rc, params)
	} else {
		r0 = ret.Get(0).(cloudflare.DNSRecord)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.CreateDNSRecordParams) error); ok {
		r1 = rf(ctx, rc, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDNSRecords provides a mock function with given fields: ctx, rc, params
func (_m *API) ListDNSRecords(ctx context.Context, rc *cloudflare.ResourceContainer, params cloudflare.ListDNSRecordsParams) ([]cloudflare.DNSRecord, *cloudflare.ResultInfo, error) {
	ret := _m.Called(ctx, rc, params)

	if len(ret) == 0 {
		panic("no return value specified for ListDNSRecords")
	}

	var r0 []cloudflare.DNSRecord
	var r1 *cloudflare.ResultInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.ListDNSRecordsParams) ([]cloudflare.DNSRecord, *cloudflare.ResultInfo, error)); ok {
		return rf(ctx, rc, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.ListDNSRecordsParams) []cloudflare.DNSRecord); ok {
		r0 = rf(ctx, rc, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cloudflare.DNSRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.ListDNSRecordsParams) *cloudflare.ResultInfo); ok {
		r1 = rf(ctx, rc, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudflare.ResultInfo)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.ListDNSRecordsParams) error); ok {
		r2 = rf(ctx, rc, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateDNSRecord provides a mock function with given fields: ctx, rc, params
func (_m *API) UpdateDNSRecord(ctx context.Context, rc *cloudflare.ResourceContainer, params cloudflare.UpdateDNSRecordParams) (cloudflare.DNSRecord, error) {
	ret := _m.Called(ctx, rc, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDNSRecord")
	}

	var r0 cloudflare.DNSRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.UpdateDNSRecordParams) (cloudflare.DNSRecord, error)); ok {
		return rf(ctx, rc, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.UpdateDNSRecordParams) cloudflare.DNSRecord); ok {
		r0 = rf(ctx, rc, params)
	} else {
		r0 = ret.Get(0).(cloudflare.DNSRecord)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudflare.ResourceContainer, cloudflare.UpdateDNSRecordParams) error); ok {
		r1 = rf(ctx, rc, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ZoneIDByName provides a mock function with given fields: zoneName
func (_m *API) ZoneIDByName(zoneName string) (string, error) {
	ret := _m.Called(zoneName)

	if len(ret) == 0 {
		panic("no return value specified for ZoneIDByName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(zoneName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(zoneName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zoneName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
